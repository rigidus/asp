#+HTML_HEAD: <!-- -*- fill-column: 87 -*- -->

#+TITLE: Модуль демонстрации

#+NAME:css
#+BEGIN_HTML
<link rel="stylesheet" type="text/css" href="/css/css.css" />
#+END_HTML

* Введение

  Как разработчик я хочу иметь возможность демонстрировать заказчику основные свойста
  системы. Я хочу иметь возможность отключать и включать демонстрационный функционал
  (на этапе загрузки системы), не затрагивая весь остальной проект.

* Как это работает

  Мы подключаем или отключаем этот модуль в asd-файле проекта.

  Этот модуль определяет:
  - дополнительные демонстрационные страницы в веб-интерфейсе и их контроллеры
  - дополнительные переменные времени выполнения
  - дополнительную инициализацию

* Сборка

  Соберем контроллеры и все функции, которые контроллеры вызывают

  #+NAME: auth_fn
  #+BEGIN_SRC lisp :tangle src/mod/demo/demo.lisp :noweb tangle :exports code
    (in-package #:asp)

    <<demo_fn_contents>>

    <<initpage>>

    <<demo_page_start>>

    <<demo_page_init>>

    <<demo_page_printout>>

    <<demo_page_open>>

    <<demo_page_goon>>

    <<demo_page_close>>

    <<demo_test>>
  #+END_SRC

* TODO Первая демонстрация                                             :pyub:

  [TODO:pyub] Чего хочет от демонстрации заказчик? Важно не предоставлять ему больше,
  даже если мы можем, т.к. это потом вызовет рост хотелок.

  [COMMENT:pyub] Хотелки тут в первую очередь мои. О хотелках начальства вам лучше не
  думать. В первую очередь нужно сделать UI для настройки контроллера и "фишечку" в
  виде печати картинки на чеке - этого мы раньше не умели, а теперь уже умеем. Во
  вторую - чтобы у нас замыкались щёлкая две релюшки и были замкнуты ровно столько мс,
  сколько выставлен "импульс" в том же UI.

** TODO Интерфейс                                                      :gmm:

   _Прототип_ [[*Настройки администратора из web-интерфейса контроллера][UI настройки администратора из web-интерфейса контроллера]] для
   демонстрации того, что у нас есть UI и через него мы можем управлять контроллером и
   отлаживать его работу.

   Пользовтель заходит по IP:port на web-интерфейс контроллера.

   Ему предлагается ввести логин и пароль.

   Введя их пользователь попадает в основное окно UI. Слева расположено меню, в котором
   есть ссылки на страницы:
   - события;
   - настройки стойки (см. начальные установки);
   - настройки сети;
   - настройка пользователей (роли, пользователи системы);
   - демо сценарий (пошаговый сценарий ;
   - выход из сеанса пользователя.

*** События

    Данный раздел является прототипом раздела отображения лога. Здесь отображаются все
    события, происходящие с нашим контроллером.

*** Настройки стойки

    [TODO:pyub] Нужно описать основные настройки стойки в теле основной специфкации.

    Прототип UI с настроек стойки, [[*Настройки работы датчиков и реле][работы датчиков и реле]] и [[*Настройка торгового оборудования][торгового оборудования]].
    То что необходимо сейчас описано в [[*Начальные установки][начальных установках демонстрации]].

*** Настройки IP

    Включить DHCP: выкл (по умолчанию)
    IP-адрес стойки: 192.168.1.2
    Маска подсети: 255.255.255.0
    Шлюз: 192.168.1.1
    DNS1: 192.168.1.1
    DNS2:  . . .
    MAC: по умолчанию выводим реальный MAC (можно поменять)
    Порт web-интерфейса: 80 (умолчание)
    Порт SSH: 22 (умолчание)
    Имя устройство: по умолчанию выводим имя устройства (можно поменять)

*** Настройки пользователей

    Прототип интерфейса управления [[*Роли пользователей системы][ролями пользователей системы]].  В этом окне мы можем
    сменить имя единственного пользователя и можем изменить ему пароль.

    Имена пользователей UI не имеют отношния к пользователям ОС контроллере. Интерфейс =root= пока не реализуем,
    все настройки у админа.

    Логин по умолчанию: admin
    Пароль по умолчанию: admin

    После изменения данных и нажатия кнопки "Применить" пользователя разлогинивает и
    снова предлагают ввести логин и пароль.

*** Демо сценарий

    Страница где мы пошагово с текстовым описательным сопровождением показываем процесс
    проезда по состояниям.

** Сценарий
*** Включение

    Показ текста в стр. 1 на дисплея "DD:MM:YYYY HH:MM Стойка проезда"(он не меняется
    далее)

    Показ текста на стр. 2 дисплея "Нажмите кнопку для получения билета"

    { "txid":XX,
      "device":"display",
      "command":"show",
      "parameters":{"screen":0}
    }

*** Начальные установки

    Цепляемся броузером к web-интерфейсу bbb (там вводятся и сохраняются основные
    параметры стойки - номер, сектор и т.п. + картинка + настройки сети IPv4)

    - Отображаем:
      - начальный ID билета
      - текущее время
    - Вводим:
      - номер стойки
      - номер сектора
      - таймаут забора билета (таймер 1)
      - длина импульса открытия шлагбаума в миллисекундах (таймер 2)
      - длина импульса закрытия шлагбаума в миллисекундах (таймер 3)
      - время, отведенное на проезд (таймер 4)
      - ключ шифрования штрих-кода
      - кнопочка "сохранить"

*** Нажатие кнопки стойки

    {
      "eventid":XX,
      "device":"user-button",
      "command":"press"
    }

    Это событие вызывает:

    - Печать билета со штрих-кодом и основной информацией (которую мы ввели в UI)

      {
        "txid":XX,
        "device":"printer",
        "command":"print",
        "parameters":{ ??? },
      }

    - Показ текста стр. 2 "Печать штрихкода"

      {
        "txid":XX,
        "device":"display",
        "command":"show",
        "parameters":{"screen":1}
      }

      Получив это сообщение нижний уровень запускает таймаут (таймер принтера), после
      срабатывания которого на верхний уровень посылается событие конца печати.

*** Событие конца печати

    {
      "eventid":XX,
      "device":"printer",
      "command":"print"
      "parameters":{ "result":"OK" }
    }

    Нижний уровень одновременно с отправкой этого сообщения запускает таймер ожидания
    взятия билета. Если в презентере принтера есть датчик взятия билета, этот таймер
    сбрасывает

    Показ текста стр. 2 "Заберите билет, проезжайте"

    {
      "txid":XX,
      "device":"display",
      "command":"show",
      "parameters":{"screen":2}
    }

    [TODO:gmm] [TODO:aav] [TODO:bvl] Нижний уровень ожидает на таймере 1 чтобы
    пользователь успел прочитать дисплей

*** Событие забирания билета

    {
      "eventid":XX,
      "device":"printer",
      "command":"ticketout"
      "parameters":{ "result":"OK" }
    }

    По этому событию верхний уровень переходит далее

*** Событие открытия шлагбаума

    Замыкаем реле =relay-gate-open= (замкнуто по [[*Настройка импульса открытия шлагбаума][таймеру №2]] из UI - импульс открытия)

    { "txid":XX,
      "device":"shlagbaum_in",
      "command":"up",
      "parameters":{"timeout":3000}
    }

    Показ текста стр. 2 "Открытие шлагбаума"

    { "txid":XX,
      "device":"display",
      "command":"show",
      "parameters":{"screen":3}
    }

    [TODO:gmm] [TODO:aav] [TODO:bvl] Нижний уровень ожидаем по таймеру 2. Если пришел
    сигнал с концевика или (при отсутствии датчика) истекло время таймера - нижний
    уровень посылает сообщение

    {
      "eventid":XX,
      "device":"shlagbaum_in",
      "command":"up"
      "parameters":{ "result":"OK" }
    }

    по которому верхний уровень переходит дальше

*** Событие проезда

    Показ текста: "Проезжайте" по таймеру 4
    {
      "txid":XX,
      "device":"display",
      "command":"show",
      "parameters":{"screen":4}
    }

    [TODO:gmm] [TODO:aav] [TODO:bvl] Нижний уровень ожидает по таймеру 4, или (если
    есть фотоэлемент/датчик проезда) в общем в любом случае, когда машина проехала
    нижний уровень посылает эвенты:

    - Машина вьехала под датчик
    {
      "eventid":XX,
      "device":"shlagbaum_in",
      "command":"car_in"
    }

    - Машина вьехала из под датчика
    {
      "eventid":XX,
      "device":"shlagbaum_in",
      "command":"car_out"
    }

    А если датчика нету, то по окончанию таймера выдается сообщение "car_out". Получив
    это сообщение верхний уровень переходит дальше

*** Событие закрытия шлагбаума

    Замыкаем реле =relay-gate-close= (замкнуто по [[*Настройка импульса закрытия шлагбаума][таймеру №3]] из UI - импульс закрытия)
    { "txid":XX,
      "device":"shlagbaum_in",
      "command":"down",
      "parameters":{"timeout":3000}
    }

    Показ текста стр. 2 "Закрытие шлагбаума"

    #+BEGIN_SRC
    { "txid":XX,
      "device":"display",
      "command":"show",
      "parameters":{"screen":5}
    }
    #+END_SRC

    [TODO:gmm] [TODO:aav] [TODO:bvl] Ожидаем по таймеру 3 - нижний уровень ждет пока
    шлагбаум закроется.

*** Возвращаемся в "нажатие кнопки"

    { "txid":XX,
      "device":"display",
      "command":"show",
      "parameters":{"screen":0}
    }

** Реализация
*** Некоторые необходимые функции

    #+NAME: demo_fn_contents
    #+BEGIN_SRC lisp
      (in-package :asp)

      (defun get-current-time-str ()
        (format nil "~A"
                (multiple-value-bind (second minute hour date month year day daylight-p zone)
                    (decode-universal-time (get-universal-time))
                  (format nil "~2,'0d:~2,'0d:~2,'0d ~2,'0d.~2,'0d.~2,'0d"
                          hour minute second date month year))))

      (defparameter *begin-ticket-id* 1)
      (defparameter *current-time* (get-current-time-str))
      (defparameter *checkpoint-id* 1)
      (defparameter *sector-id* 1)
      (defparameter *timer-1* 3000)
      (defparameter *timer-2* 3000)
      (defparameter *timer-3* 3000)
      (defparameter *timer-4* 3000)
      (defparameter *secret* "secret-key")

      (defparameter *low-level-endpoint* "http://localhost:8000/")
      (defparameter *tx-counter* 1)

      (defun send-to-low-level (msg)
        (multiple-value-bind (body-or-stream status-code headers uri stream must-close reason-phrase)
            (drakma:http-request
             *low-level-endpoint*
             :method :post
             :content ;; (format nil "~{~A~^&~}"
                      ;;        `(("json" . ,(drakma:url-encode (cl-json:encode-json-to-string msg) :utf-8))))
                      (cl-json:encode-json-to-string msg)
             :content-type "application/x-www-form-urlencoded; charset=UTF-8"
             :force-binary t)
          (prog1
              (flexi-streams:octets-to-string body-or-stream :external-format :utf-8)
            (incf *tx-counter*))))

      (defmacro define-demo-page ((name page-url title note btn) &body body)
        `(define-page ,name ,page-url
          (let ((breadcrumb (breadcrumb ,title))
                (user       (if (null *current-user*) "" (name (get-user *current-user*)))))
            (standard-page (:breadcrumb breadcrumb :user user :menu (menu) :overlay (reg-overlay))
              (content-box () (heading (,title) ,note))
              (content-box (:class "size-3-5 switch-content-container")
                (form ("demoform" ,title :action ,page-url :class "form-section-container")
                  %CTRL%))
              (ps-html ((:span :class "clear")))))
          (:CTRL (ps-html
                  ((:input :type "hidden" :name "act" :value "CTRL"))
                  ((:div :class "form-send-container")
                   (submit ,btn)))
                 (let ((breadcrumb (breadcrumb ,title))
                       (user       (if (null *current-user*) "" (name (get-user *current-user*)))))
                   (standard-page (:breadcrumb breadcrumb :user user :menu (menu) :overlay (reg-overlay))
                     (content-box () (heading ("Успешно")))
                     (content-box () (system-msg ("success")
                                       ,@body))
                     (ps-html ((:span :class "clear"))))))))
    #+END_SRC

*** Страница инициализации

    #+NAME: initpage
    #+BEGIN_SRC lisp
      (in-package :asp)

      (flet ((form-section (default-email btn)
               (content-box (:class "size-3-5 switch-content-container")
                 (form ("demoform" "Начальные установки" :action "/demo" :class "form-section-container")
                   ((:div :class "form-section")
                    (fieldset ""
                      (input ("begin-ticket-id"  "начальный ID билета" :required t :type "" :maxlength "50" :value *begin-ticket-id*))
                      (input ("current-time"     "текущее время" :required t :type "" :maxlength "50" :value  (get-current-time-str)))
                      (input ("checkpoint-id"    "номер стойки" :required t :type "" :maxlength "50" :value *checkpoint-id*))
                      (input ("sector-id"        "номер сектора" :required t :type "" :maxlength "50" :value *sector-id*))
                      (input ("timer-1"          "таймаут забора билета (таймер 1)" :required t :type "" :maxlength "50" :value *timer-1*))
                      (input ("timer-2"          "длина импульса открытия шлагбаума в миллисекундах (таймер 2)" :required t :type "" :maxlength "50" :value *timer-2*))
                      (input ("timer-3"          "длина импульса закрытия шлагбаума в миллисекундах (таймер 3)" :required t :type "" :maxlength "50" :value *timer-3*))
                      (input ("timer-4"          "время, отведенное на проезд (таймер 4)" :required t :type "" :maxlength "50" :value *timer-4*))
                      (input ("secret"           "ключ шифрования штрих-кода" :required t :type "password" :maxlength "50" :autocomplete "off" :value *secret*))))
                   btn))))
        (define-page demo "/demo"
          (let ((breadcrumb (breadcrumb "Демо_1"))
                (user       (if (null *current-user*) "" (name (get-user *current-user*)))))
            (standard-page (:breadcrumb breadcrumb :user user :menu (menu) :overlay (reg-overlay))
              (content-box ()
                (heading ("Демо 1") "На этой странице можно изменять начальные установки системы"))
              (form-section (aif (post-parameter "email") it "") %CTRL%)
              (ps-html ((:span :class "clear")))))
          (:CTRL (ps-html
                   ((:input :type "hidden" :name "act" :value "CTRL"))
                   ((:div :class "form-send-container")
                    (submit "Сохранить" )))
                 (progn
                   (setf *begin-ticket-id* (parse-integer (getf p :begin-ticket-id)))
                   (setf *current-time* (getf p :current-time))
                   (setf *checkpoint-id* (parse-integer (getf p :checkpoint-id)))
                   (setf *sector-id* (parse-integer (getf p :sector-id)))
                   (setf *timer-1* (parse-integer (getf p :timer-1)))
                   (setf *timer-2* (parse-integer (getf p :timer-2)))
                   (setf *timer-3* (parse-integer (getf p :timer-3)))
                   (setf *timer-4* (parse-integer (getf p :timer-4)))
                   (setf *secret* (getf p :secret))
                   (let ((breadcrumb (breadcrumb "Демо_1"))
                         (user       (if (null *current-user*) "" (name (get-user *current-user*)))))
                     (standard-page (:breadcrumb breadcrumb :user user :menu (menu) :overlay (reg-overlay))
                       (content-box ()
                         (heading ("Успешно")))
                       (content-box ()
                         (system-msg ("success")
                           (ps-html ((:p) "Данные сохранены")
                                    ((:a :href "/event_checkpoint_button") "Следующий шаг - нажатие кнопки на стойке"))))
                       (ps-html ((:span :class "clear")))))))))
    #+END_SRC

*** События и их обработчики
**** Включение

     #+NAME: demo_page_start
     #+BEGIN_SRC lisp
       (in-package :asp)

       (let ((msg `((:TXID . ,*tx-counter*)
                    (:DEVICE . "display")
                    (:COMMAND . "show")
                    (:PARAMETERS (:SCREEN . "0")))))
         (define-demo-page (demo-page-start "/demo_page_start" "Включение стойки"
                                            "На этой странице можно эмулировать включение стойки"
                                            "Включить стойку")
           (progn
             ;; Отправка сообщения чтобы показать текст на дисплее
             (let ((response (send-to-low-level msg)))
               (format nil "~{~A~}"
                       (list
                        (ps-html ((:p) "Сообщение:"))
                        "<pre>"
                        (cl-json:encode-json-to-string msg)
                        "</pre>"
                        (ps-html ((:p) "Ответ:"))
                        "<pre>"
                        (bprint response)
                        "</pre>"
                        ))))))
    #+END_SRC

**** Нажатие кнопки на стойке

     #+NAME: demo_page_init
     #+BEGIN_SRC lisp
       (in-package :asp)

       (defun ticket-assembly (ticket-id time-str checkpoint-id sector-id)
         `("========================="
           "ДОБРО ПОЖАЛОВАТЬ!"
           "========================="
           ,(format nil "~8,'0d" *begin-ticket-id*)
           ,(format nil "Въезд: ~A" (get-current-time-str))
           "Тип т/с: легковой"
           "Гос. знак: А0000АА 78RUS"
           ,(format nil "Стойка ~A, сектор ~A" *checkpoint-id* *sector-id*)
           "========================="
           "проследуйте на место"
           "МЕСТО 0201"
           "в секторе 2"
           "========================="
           "Выезд 1 работает:"
           "с 09:00 до 22:00"
           "Выезд 2 работает:"
           "круглосуточно"
           "В тарифной зоне 1:"
           "20 минут - бесплатно"
           "1 час - 100 руб."
           "более 3 часов - 50 руб."
           "В тарифной зоне 2:"
           "1 час - 100 руб."
           "после 22:00 - 200 руб."
           "========================="
           "Телефон для справок:"
           "8(812)000-00-00"))

       (defun barcode-assembly (param)
         "1A B4 C5 DE 35")

       ;; {
       ;;   "eventid":XX,
       ;;   "device":"user-button",
       ;;   "command":"press"
       ;; }

       (let* ((ticket      (ticket-assembly
                            *begin-ticket-id*
                            (get-current-time-str)
                            *checkpoint-id*
                            *sector-id*))
              (barcode     (barcode-assembly ""))
              (msg-ticket  `((:TXID . ,*tx-counter*)
                             (:DEVICE . "display")
                             (:COMMAND . "print")
                             (:PARAMETERS ((:TICKET . ,ticket) (:BARCODE . ,barcode)))))
              (msg-display `((:TXID . ,*tx-counter*)
                             (:DEVICE . "display")
                             (:COMMAND . "show")
                             (:PARAMETERS (:SCREEN . 1)))))
         (define-demo-page (demo-page-init "/demo_page_init" "Нажатие кнопки на стойке"
                                           "На этой странице можно эмулировать нажатие кнопки на стойке"
                                           "Нажать кнопку")
           (progn
             ;; Отправка сообщения чтобы напечатать билет со штрихкодом
             (let ((response-ticket  (send-to-low-level msg-ticket))
                   (response-display (send-to-low-level msg-display)))
               ;; TODO : Непонятно кто должен установить таймер, который вызовет событие окончания печати
               (format nil "~{~A~}"
                       (list
                        (ps-html ((:p) "Печать билета со штрихкодом"))
                        "<pre>"
                        (format nil "~{~A<br />~}" ticket)
                        "</pre>"
                        (ps-html ((:p) "Печать штрихкода"))
                        "<pre>"
                        (bprint response-ticket)
                        "</pre>"
                        (ps-html ((:p) "Вывод на дисплей"))
                        "<pre>"
                        (bprint response-ticket)
                        "</pre>"
                        ))))))
    #+END_SRC

**** Конец печати / забирание билета

     #+NAME: demo_page_printout
     #+BEGIN_SRC lisp
       (in-package :asp)

       ;; {
       ;;   "eventid":XX,
       ;;   "device":"printer",
       ;;   "command":"print"
       ;;   "parameters":{ "result":"OK" }
       ;; }

       (let* ((msg `((:TXID . ,*tx-counter*)
                     (:DEVICE . "display")
                     (:COMMAND . "show")
                     (:PARAMETERS (:SCREEN . 2)))))
         (define-demo-page (demo-page-printout "/demo_page_printout" "Конец печати, пользователь забирает билет"
                                               "На этой странице можно эмулировать забирание билета пользователем"
                                               "Забрать билет")
           (progn
             ;; Отправка сообщения чтобы показать текст "Заберите билет"
             (let ((response (send-to-low-level msg)))
               (format nil "~{~A~}"
                       (list
                        (ps-html ((:p) "Сообщение"))
                        "<pre>"
                        (cl-json:encode-json-to-string msg)
                        "</pre>"
                        (ps-html ((:p) "Response"))
                        "<pre>"
                        (bprint response)
                        "</pre>"
                        ))))))
    #+END_SRC

**** Открытие шлагбаума

     #+NAME: demo_page_open
     #+BEGIN_SRC lisp
       (in-package :asp)

       (let* ((msg-shlag   `((:TXID . ,*tx-counter*)
                             (:DEVICE . "shlagbaum_in")
                             (:COMMAND . "up")
                             (:PARAMETERS (:TIMEOUT . 3000))))
              (msg-display `((:TXID . ,*tx-counter*)
                             (:DEVICE . "display")
                             (:COMMAND . "show")
                             (:PARAMETERS (:SCREEN . 3)))))
         (define-demo-page  (demo-page-open "/demo_page_open" "Открытие шлагбаума"
                                            "На этой странице можно открыть шлагбаум" "Открыть шлагбаум")
           (progn
             (let ((response-shlag   (send-to-low-level msg-shlag))
                   (response-display (send-to-low-level msg-display)))
               (format nil "~{~A~}"
                       (list
                        (ps-html ((:p) "Сообщение шлагбауму"))
                        "<pre>"
                        (cl-json:encode-json-to-string msg-shlag)
                        "</pre>"
                        (ps-html ((:p) "Response"))
                        "<pre>"
                        (bprint response-shlag)
                        "</pre>"
                        (ps-html ((:p) "Сообщение дисплею"))
                        "<pre>"
                        (cl-json:encode-json-to-string msg-display)
                        "</pre>"
                        (ps-html ((:p) "Response"))
                        "<pre>"
                        (bprint response-display)
                        "</pre>"
                        ))))))
    #+END_SRC

**** Проезд

     #+NAME: demo_page_goon
     #+BEGIN_SRC lisp
       (in-package :asp)

       (let* ((msg-display `((:TXID . ,*tx-counter*)
                             (:DEVICE . "display")
                             (:COMMAND . "show")
                             (:PARAMETERS (:SCREEN . 4)))))
         (define-demo-page  (demo-page-goon "/demo_page_goon" "Проезд"
                                            "На этой странице можно эмулировать проезд" "Проезжайте")
           (progn
             (let ((response-display (send-to-low-level msg-display)))
               (format nil "~{~A~}"
                       (list
                        (ps-html ((:p) "Сообщение дисплею"))
                        "<pre>"
                        (cl-json:encode-json-to-string msg-display)
                        "</pre>"
                        (ps-html ((:p) "Response"))
                        "<pre>"
                        (bprint response-display)
                        "</pre>"
                        ))))))
    #+END_SRC

**** Закрытие шлагбаума

     #+NAME: demo_page_close
     #+BEGIN_SRC lisp
       (in-package :asp)

       (let* ((msg-shlag   `((:TXID . ,*tx-counter*)
                             (:DEVICE . "shlagbaum_in")
                             (:COMMAND . "down")
                             (:PARAMETERS (:TIMEOUT . 3000))))
              (msg-display `((:TXID . ,*tx-counter*)
                             (:DEVICE . "display")
                             (:COMMAND . "show")
                             (:PARAMETERS (:SCREEN . 5)))))
         (define-demo-page  (demo-page-close "/demo_page_close" "Закрытие шлагбаума"
                                            "На этой странице можно закрыть шлагбаум" "Закрыть шлагбаум")
           (progn
             (let ((response-shlag   (send-to-low-level msg-shlag))
                   (response-display (send-to-low-level msg-display)))
               (format nil "~{~A~}"
                       (list
                        (ps-html ((:p) "Сообщение шлагбауму"))
                        "<pre>"
                        (cl-json:encode-json-to-string msg-shlag)
                        "</pre>"
                        (ps-html ((:p) "Response"))
                        "<pre>"
                        (bprint response-shlag)
                        "</pre>"
                        (ps-html ((:p) "Сообщение дисплею"))
                        "<pre>"
                        (cl-json:encode-json-to-string msg-display)
                        "</pre>"
                        (ps-html ((:p) "Response"))
                        "<pre>"
                        (bprint response-display)
                        "</pre>"
                        ))))))
    #+END_SRC

** Необходимо реализовать
[TODO:aav]
   - Контроллер пинов (inotify)
   - юнит-тесты к менеджеру девайсов
   - менеджер девайсов и транзакций допилить
   - чтение конфига девайсов из БД
   - логика шлагбаума и обработка его команд
[TODO:bvl]
   - Вывод на дисплей
     - трех подготовленных паттернов
     - Надо сделать класс дисплея
     - обработка команд дисплея
   - Вывод на принтер подготовленного паттерна
     - Надо сделать класс принтера
     - обработка команд принтера
   - Интеграционная отладка
[TODO:gmm]
   - Вебморда с возможностью изменения БД
   - Схема БД, описать в доке
   - Списки команд для всех устройств по утвержденному шаблону
   - Машина состояний для демо

[TODO:aav]
[TODO:bvl]
[TODO:gmm]
   - описать в доке схему БД
   - описать в доке списки команд на устройства
   - описать в доке списки ошибок для нижнего и верхнего уровней
   - описать в доке логику и алгоритмы работы с каждым устройством
* Тесты

  Теперь у нас есть весь необходимый функционал, для работы авторизации. Мы можем его
  протестировать, для этого сформируем тест:

  #+NAME: demo_test
  #+BEGIN_SRC lisp

    ;; Тестируем авторизацию
    (defun demo-test ()
      <<demo_test_contents>>
      (dbg "passed: demo-test~%"))
    (demo-test)
  #+END_SRC

  #+NAME: demo_test_contents
  #+BEGIN_SRC lisp
    (in-package #:asp)

    ;; TODO
  #+END_SRC
