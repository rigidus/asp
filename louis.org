#+TITLE: moto
#+HTML_HEAD: <!-- -*- fill-column: 86 -*- -->

#+NAME: css
#+BEGIN_HTML
<link rel="stylesheet" type="text/css" href="css/css.css" />
#+END_HTML

Соберем веб-интерфейс:

#+NAME: iface
#+BEGIN_SRC lisp :tangle src/iface.lisp :noweb tangle :exports code :padline no :comments link
  ;;;; <<copyright>>

  ;;;; iface.lisp

  (in-package #:asp)

  ;; Компилируем шаблоны
  (closure-template:compile-template
   :common-lisp-backend (pathname (concatenate 'string *base-path* "templates.htm")))

  ;; Страницы
  <<iface_contents>>
#+END_SRC

* Шаблоны

  Шаблоны будем вставлять в отдельный файл =src/templates.htm=

  #+NAME: templates
  #+BEGIN_SRC closure-template-html :tangle src/templates.htm :noweb tangle :exports code :padline no :comments link
    // <<copyright>>
    // -*- mode: closure-template-html; fill-column: 240 -*-

    {namespace tpl}

    <<tpl_header>>

    <<tpl_content>>

    <<tpl_footer>>

    {template louis}
    <!DOCTYPE html>
    <html data-share-domain="louis.de" lang="en">
        <head>
            <meta charset="utf-8" />
            <title>{$title}</title>
            <link href="/css/lucasa.css" media="all" rel="stylesheet" type="text/css" />
            <link href="/css/lucas.css" media="all" rel="stylesheet" type="text/css" />
            <link href="/css/luca.css" media="all" rel="stylesheet" type="text/css" />
            <link href="/css/luc.css" media="all" rel="stylesheet" type="text/css" />
            <link href="/css/sortable.css"  media="all" rel="stylesheet" type="text/css" />
            <script type="text/javascript" src="/js/jquery-v-1.10.2.js"></script>
            <script type="text/javascript" src="/js/jquery-ui-v-1.10.3.js"></script>
            <script type="text/javascript" src="/js/modernizr.js"></script />
            <script type="text/javascript" src="/js/jquery.sortable.original.js"></script>
            <script type="text/javascript" src="/js/frp.js"></script>
        </head>
        <body class="en" data-background-image="/img/bg-05.jpg">
            <div style="height: 1077px; position: fixed; transform: translateY(0px);" id="js__bg" class="bg">
                <img src="/img/bg-05.jpg" />
            </div>
            {$header |noAutoescape}
            <hr class="hidden" id="content" />
            {$content |noAutoescape}
            <hr class="hidden" />
            {$footer |noAutoescape}
            <script type="text/javascript" src="/js/scdc.js"></script>
            <script type="text/javascript" src="/js/i18n.en_GB.utf8.js"></script>
            <script type="text/javascript" src="/js/config.js"></script>
        </body>
    </html>
    {/template}
  #+END_SRC

** Header

   #+NAME: tpl_header
   #+BEGIN_SRC closure-template-html
     {template header}
         <header class="header">
             <noscript>
                 <div class="useragent-warning">
                     <div class="container system-message media">
                         <span class="result-icon result-icon--caution media__item media__item--left"></span>
                         <div class="system-message__text-container media__content">
                             <div class="system-message__text text-container error">
                                 <p>You have deactivated Javascript and possibly also the use of cookies.</p>
                             </div>
                         </div>
                         <span class="clear"></span>
                     </div>
                 </div>
             </noscript>
         </header>
     {/template}
   #+END_SRC

** Footer

   #+NAME: tpl_footer
   #+BEGIN_SRC closure-template-html
     {template footer}
         <footer class="footer footer--full-content">
             <div class="container">
             </div>
         </footer>
     {/template}
   #+END_SRC

* Отображение списков элементов

  Часто на странице нужно отобразить список каких-нибудь сущностей
  системы - например, пользователей или групп. Хочется, чтобы такого
  рода отображения с одной стороны выполнялись по одному шаблону, а с
  другой - были специфицированы типом отображаемого обьекта.

  Чтобы обеспечить эти противоречивые требования введем метод show
  который принимает разные типы параметров. Если ему передан список -
  он отображает блок со списком элементов и рекурсивно вызывает сам
  себя для отображения каждого элемента - таким образом обеспечивается
  унификация.

  Есть также один частный случай - пустой список. Тут нужно
  отобразить, что элементов нет.

  #+NAME: iface_contents
  #+BEGIN_SRC lisp
    (in-package #:asp)

    (defmethod show ((param (eql nil)) &rest actions &key &allow-other-keys)
      (ps-html
       ((:div :class "article-list-container article-list-container--list")
        ((:ul :class "article-list article-list--list")
         ((:p) "Нет элементов для отображения")))))
  #+END_SRC

  Часто при отображении списка сущностей нужно также отображать
  возможные действия с ними - удаление, например. В этом случае методу
  отображения коллекции можно передать в параметрах plist этих
  действий, выраженных как функции одной переменной, которой является
  элемент коллекции. Эти функции будут вызваны при отображении элемента.

  #+NAME: iface_contents
  #+BEGIN_SRC lisp
    (in-package #:asp)

    (defmethod show ((param list) &rest actions &key &allow-other-keys)
      (setf (car param)
            (apply #'show (list* (car param) actions)))
      (ps-html
       ((:div :class "article-list-container article-list-container--list")
        ((:ul :class "article-list article-list--list")
         (reduce #'(lambda (acc elt)
                     (concatenate 'string
                                  acc
                                  (apply #'show (list* elt actions))))
                 param)))))
  #+END_SRC

  Если мы применяем определения кнопок в макросе =define-page=, то мы
  можем удобным образом определить кнопки для всей коллекции вот так:

  #+BEGIN_SRC lisp
    (labels ((perm-check (current-user)
               (member "Пропускать везде" (mapcar #'(lambda (x) (name (get-group (group-id x)))) (find-user2group :user-id current-user)) :test #'equal)))
      (define-page page-symbol "/page-url"
        (let* ((breadcrumb (breadcrumb "page-name" ("/" . "Главная")))
               (user       (if (null *current-user*) "Анонимный пользователь" (name (get-user *current-user*)))))
          (standard-page (:breadcrumb breadcrumb :user user :menu (menu) :overlay (reg-overlay))
            (content-box ()
              (form ("formname" "form-title" :class "form-section-container")
                (show (all-entity)
                      :del #'(lambda (group) %DEL%))))
            (ps-html ((:span :class "clear"))))))
      (:del (if (perm-check *current-user*) ;; button view with check permissions
                (submit "Удалить" :name "data" :value (id group))
                "")
            ;; button controller with check permissions
            (if (perm-check *current-user*)
                (progn (del-group (getf p :data))
                       (redirect "/groups"))
                "")))
  #+END_SRC
